codegen_expression(getchild(statement, 0), scope);
printf("	%%%d = icmp ne i32 %%%d, 0\n", temporary, temporary-1);
temporary++;

printf("	br i1 %%%d, label %%%d, label ", temporary-1, temporary);
temporary++;

checkpoint = temp

else_label = codegen_statement(getchild(statement, 1), scope, print=0);
temp++;         // temp da label

fi_label = codegen_statement(getchild(statement, 2), scope, print=0);

temp = checkpoint


printf("%%%d\n", else_label);



// Then block:

printf("%d:\n", checkpoint-1);
codegen_statement(getchild(statement, 1), scope, print=1);

printf("	br label %%%d\n", fi_label);



// Else block:

printf("%d:\n", else_label);
codegen_statement(getchild(statement, 2), scope, print=1);
printf("	br label %%%d\n", fi_label);


printf("%d:\n", fi_label);


























# construcao de funcao de inicializacao de variaveis globais
for node in global_scope
    if Declaration
        anota o node com o nome da var (= identifier)

        # verificar tipos
        if (#childs == 3)
            t = codegen_exp()
            store t em @var
        else
            store 0 em @var         # @var = global <type> 0


codegen_prog
    for node in prog
        switch:
            case funcDec:
                declare <type> @_identifier ( [ <type>, for param ] )
                break;
            
            case funcDef:
                 define <ResultType> @<FunctionName> 
                    codegen_param()
                    codegen_func que chamaria varios     --->    codegen_statmnt(funcBody)


            case Dec:
                break;


codegen_statmnt
    case Declaration:
        codegen_dec
    
    case If
        codegen_if
    
    case While
        codegen_while

    case Return
        codegen_return

    case StatList   
        codegen_func

    default
        codegen_exp
        



codegen_dec
    if (#childs == 3)
            t = codegen_exp (3o filho)
            %temp = alloca <type>
            store <type> %t, <type>* %temp     

    else
        %temp = alloca <type>

    * anotar temp *


codegen_if
    codegen_exp(condicao)
    **comparacao**

    labelthen:
        if (valido)
            codegen_statmnt
    
    labelelse:
        if (valido)
            codegen_statmnt

    labelFi:


codegen_while:
    loop_label:
        codegen_exp(condicao)
        comparacao

        if !condicao Jump exit_label

        codegen_statmnt


        jump loop_label
    exit_label:


codegen_return
    if 1o filho != Null
        t = codegen_exp(1o filho)
        ret <type> t
    else
        ret void


codegen_exp:
    case Store
        node = search local
            if !local node = search global

        t = codegen_exp(lado direito)

        if node->type== double && t->ype != double
            (double) t

        store <type> %t, i32* %node->var
        break

    case Comma
        codegen_exp(child1)
        codegen_exp(child2)
    

    temp++
















%X = sitofp i32 257 to float         ; yields float:257.0
%Y = sitofp i8 -1 to double          ; yields double:-1.0